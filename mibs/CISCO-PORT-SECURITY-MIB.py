#
# PySNMP MIB module CISCO-PORT-SECURITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source http://raw.githubusercontent.com:80/simonjj/SnmpMibs/master/CISCO-PORT-SECURITY-MIB.mib
# Produced by pysmi-0.3.4 at Mon Sep 13 13:02:46 2021
# On host tmn-ws679 platform Linux version 4.4.0-18362-Microsoft by user gtarada
# Using Python version 3.9.7 (default, Sep 10 2021, 00:03:59) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
vtpVlanName, = mibBuilder.importSymbols("CISCO-VTP-MIB", "vtpVlanName")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, IpAddress, MibIdentifier, NotificationType, Counter32, Counter64, Integer32, iso, Bits, Gauge32, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "IpAddress", "MibIdentifier", "NotificationType", "Counter32", "Counter64", "Integer32", "iso", "Bits", "Gauge32", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
MacAddress, TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
ciscoPortSecurityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 315))
ciscoPortSecurityMIB.setRevisions(('2005-05-04 00:00', '2005-03-12 00:00', '2004-08-07 00:00', '2004-03-08 00:00', '2004-02-10 00:00', '2003-07-01 00:00', '2003-02-24 00:00',))
if mibBuilder.loadTexts: ciscoPortSecurityMIB.setLastUpdated('200505040000Z')
if mibBuilder.loadTexts: ciscoPortSecurityMIB.setOrganization('Cisco Systems, Inc.')
ciscoPortSecurityMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 0))
ciscoPortSecurityMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 1))
ciscoPortSecurityMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 2))
cpsGlobalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1))
cpsInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2))
class ClearSecureMacAddrType(TextualConvention, Integer32):
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("done", 0), ("dynamic", 1), ("static", 2), ("sticky", 3), ("all", 4))

cpsGlobalMaxSecureAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsGlobalMaxSecureAddress.setStatus('current')
cpsGlobalTotalSecureAddress = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsGlobalTotalSecureAddress.setStatus('current')
cpsGlobalPortSecurityEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsGlobalPortSecurityEnable.setStatus('current')
cpsGlobalSNMPNotifRate = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setUnits('notifs per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsGlobalSNMPNotifRate.setStatus('current')
cpsGlobalSNMPNotifControl = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsGlobalSNMPNotifControl.setStatus('current')
cpsGlobalClearSecureMacAddresses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 1, 6), ClearSecureMacAddrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsGlobalClearSecureMacAddresses.setStatus('current')
cpsIfConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1), )
if mibBuilder.loadTexts: cpsIfConfigTable.setStatus('current')
cpsIfConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: cpsIfConfigEntry.setStatus('current')
cpsIfPortSecurityEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfPortSecurityEnable.setStatus('current')
cpsIfPortSecurityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("secureup", 1), ("securedown", 2), ("shutdown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfPortSecurityStatus.setStatus('current')
cpsIfMaxSecureMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfMaxSecureMacAddr.setStatus('current')
cpsIfCurrentSecureMacAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfCurrentSecureMacAddrCount.setStatus('current')
cpsIfSecureMacAddrAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfSecureMacAddrAgingTime.setStatus('current')
cpsIfSecureMacAddrAgingType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absolute", 1), ("inactivity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfSecureMacAddrAgingType.setStatus('current')
cpsIfStaticMacAddrAgingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfStaticMacAddrAgingEnable.setStatus('current')
cpsIfViolationAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("shutdown", 1), ("dropNotify", 2), ("drop", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfViolationAction.setStatus('current')
cpsIfViolationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfViolationCount.setStatus('current')
cpsIfSecureLastMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfSecureLastMacAddress.setStatus('current')
cpsIfClearSecureAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfClearSecureAddresses.setStatus('deprecated')
cpsIfUnicastFloodingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfUnicastFloodingEnable.setStatus('current')
cpsIfShutdownTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 13), Unsigned32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfShutdownTimeout.setStatus('current')
cpsIfClearSecureMacAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 14), ClearSecureMacAddrType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfClearSecureMacAddresses.setStatus('current')
cpsIfStickyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfStickyEnable.setStatus('current')
cpsIfInvalidSrcRateLimitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfInvalidSrcRateLimitEnable.setStatus('current')
cpsIfInvalidSrcRateLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1000))).setUnits('Packets per second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfInvalidSrcRateLimitValue.setStatus('current')
cpsIfSecureLastMacAddrVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 1, 1, 18), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfSecureLastMacAddrVlanId.setStatus('current')
cpsSecureMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 2), )
if mibBuilder.loadTexts: cpsSecureMacAddressTable.setStatus('deprecated')
cpsSecureMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-SECURITY-MIB", "cpsSecureMacAddress"))
if mibBuilder.loadTexts: cpsSecureMacAddressEntry.setStatus('deprecated')
cpsSecureMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 2, 1, 1), MacAddress())
if mibBuilder.loadTexts: cpsSecureMacAddress.setStatus('deprecated')
cpsSecureMacAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSecureMacAddrType.setStatus('deprecated')
cpsSecureMacAddrRemainingAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsSecureMacAddrRemainingAge.setStatus('deprecated')
cpsSecureMacAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsSecureMacAddrRowStatus.setStatus('deprecated')
cpsIfVlanSecureMacAddrTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3), )
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddrTable.setStatus('current')
cpsIfVlanSecureMacAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddress"), (0, "CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureVlanIndex"))
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddrEntry.setStatus('current')
cpsIfVlanSecureMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddress.setStatus('current')
cpsIfVlanSecureVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3, 1, 2), VlanIndex())
if mibBuilder.loadTexts: cpsIfVlanSecureVlanIndex.setStatus('current')
cpsIfVlanSecureMacAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("sticky", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddrType.setStatus('current')
cpsIfVlanSecureMacAddrRemainAge = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3, 1, 4), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddrRemainAge.setStatus('current')
cpsIfVlanSecureMacAddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddrRowStatus.setStatus('current')
cpsIfVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 4), )
if mibBuilder.loadTexts: cpsIfVlanTable.setStatus('obsolete')
cpsIfVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-SECURITY-MIB", "cpsIfVlanIndex"))
if mibBuilder.loadTexts: cpsIfVlanEntry.setStatus('obsolete')
cpsIfVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 4, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cpsIfVlanIndex.setStatus('obsolete')
cpsIfVlanMaxSecureMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpsIfVlanMaxSecureMacAddr.setStatus('obsolete')
cpsIfVlanCurSecureMacAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfVlanCurSecureMacAddrCount.setStatus('obsolete')
cpsIfMultiVlanTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5), )
if mibBuilder.loadTexts: cpsIfMultiVlanTable.setStatus('current')
cpsIfMultiVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-PORT-SECURITY-MIB", "cpsIfMultiVlanIndex"))
if mibBuilder.loadTexts: cpsIfMultiVlanEntry.setStatus('current')
cpsIfMultiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5, 1, 1), VlanIndex())
if mibBuilder.loadTexts: cpsIfMultiVlanIndex.setStatus('current')
cpsIfMultiVlanMaxSecureMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5, 1, 2), Unsigned32().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsIfMultiVlanMaxSecureMacAddr.setStatus('current')
cpsIfMultiVlanSecureMacAddrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpsIfMultiVlanSecureMacAddrCount.setStatus('current')
cpsIfMultiVlanClearSecureMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5, 1, 4), ClearSecureMacAddrType().clone('done')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsIfMultiVlanClearSecureMacAddr.setStatus('current')
cpsIfMultiVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 315, 1, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cpsIfMultiVlanRowStatus.setStatus('current')
cpsInterfaceNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 0, 0))
cpsSecureMacAddrViolation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 315, 0, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifName"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureLastMacAddress"))
if mibBuilder.loadTexts: cpsSecureMacAddrViolation.setStatus('current')
cpsTrunkSecureMacAddrViolation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 315, 0, 0, 2)).setObjects(("IF-MIB", "ifName"), ("CISCO-VTP-MIB", "vtpVlanName"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureLastMacAddress"))
if mibBuilder.loadTexts: cpsTrunkSecureMacAddrViolation.setStatus('deprecated')
cpsIfVlanSecureMacAddrViolation = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 315, 0, 0, 3)).setObjects(("IF-MIB", "ifName"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureLastMacAddrVlanId"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureLastMacAddress"))
if mibBuilder.loadTexts: cpsIfVlanSecureMacAddrViolation.setStatus('current')
ciscoPortSecurityMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 1))
ciscoPortSecurityMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2))
ciscoPortSecurityMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 1, 1)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsNotificationGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtConfigInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPortSecurityMIBCompliance = ciscoPortSecurityMIBCompliance.setStatus('deprecated')
ciscoPortSecurityMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 1, 2)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsInterfaceGroup1"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsNotificationGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsUnicastFloodingInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsShutdownTimeoutInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPortSecurityMIBCompliance1 = ciscoPortSecurityMIBCompliance1.setStatus('deprecated')
ciscoPortSecurityMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 1, 3)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsInterfaceGroup2"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsNotificationGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsUnicastFloodingInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsShutdownTimeoutInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalClearAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPortSecurityMIBCompliance2 = ciscoPortSecurityMIBCompliance2.setStatus('obsolete')
ciscoPortSecurityMIBCompliance3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 1, 4)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsInterfaceGroup2"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsNotificationGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsUnicastFloodingInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsShutdownTimeoutInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalClearAddressGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsTrunkSecureNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPortSecurityMIBCompliance3 = ciscoPortSecurityMIBCompliance3.setStatus('obsolete')
ciscoPortSecurityMIBCompliance4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 1, 5)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsInterfaceGroup2"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsNotificationGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsUnicastFloodingInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsShutdownTimeoutInterfaceGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMultiVlanGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalClearAddressGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureNotificationGroup"), ("CISCO-PORT-SECURITY-MIB", "cpsExtInterfaceGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoPortSecurityMIBCompliance4 = ciscoPortSecurityMIBCompliance4.setStatus('current')
cpsGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 1)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalMaxSecureAddress"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalTotalSecureAddress"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalPortSecurityEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalSNMPNotifRate"), ("CISCO-PORT-SECURITY-MIB", "cpsGlobalSNMPNotifControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsGlobalGroup = cpsGlobalGroup.setStatus('current')
cpsInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 2)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfPortSecurityEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfPortSecurityStatus"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMaxSecureMacAddr"), ("CISCO-PORT-SECURITY-MIB", "cpsIfCurrentSecureMacAddrCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureMacAddrAgingType"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureMacAddrAgingTime"), ("CISCO-PORT-SECURITY-MIB", "cpsIfStaticMacAddrAgingEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfViolationAction"), ("CISCO-PORT-SECURITY-MIB", "cpsIfViolationCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfClearSecureAddresses"), ("CISCO-PORT-SECURITY-MIB", "cpsSecureMacAddrType"), ("CISCO-PORT-SECURITY-MIB", "cpsSecureMacAddrRemainingAge"), ("CISCO-PORT-SECURITY-MIB", "cpsSecureMacAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsInterfaceGroup = cpsInterfaceGroup.setStatus('deprecated')
cpsExtInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 3)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfSecureLastMacAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsExtInterfaceGroup = cpsExtInterfaceGroup.setStatus('current')
cpsNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 4)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsSecureMacAddrViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsNotificationGroup = cpsNotificationGroup.setStatus('current')
cpsUnicastFloodingInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 5)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfUnicastFloodingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsUnicastFloodingInterfaceGroup = cpsUnicastFloodingInterfaceGroup.setStatus('current')
cpsShutdownTimeoutInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 6)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfShutdownTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsShutdownTimeoutInterfaceGroup = cpsShutdownTimeoutInterfaceGroup.setStatus('current')
cpsIfVlanSecureMacAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 8)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrType"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrRemainAge"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsIfVlanSecureMacAddrGroup = cpsIfVlanSecureMacAddrGroup.setStatus('current')
cpsInterfaceGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 9)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfPortSecurityEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfPortSecurityStatus"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMaxSecureMacAddr"), ("CISCO-PORT-SECURITY-MIB", "cpsIfCurrentSecureMacAddrCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureMacAddrAgingType"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureMacAddrAgingTime"), ("CISCO-PORT-SECURITY-MIB", "cpsIfStaticMacAddrAgingEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfViolationAction"), ("CISCO-PORT-SECURITY-MIB", "cpsIfViolationCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfClearSecureAddresses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsInterfaceGroup1 = cpsInterfaceGroup1.setStatus('deprecated')
cpsExtConfigInterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 10)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfShutdownTimeout"), ("CISCO-PORT-SECURITY-MIB", "cpsIfUnicastFloodingEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsExtConfigInterfaceGroup = cpsExtConfigInterfaceGroup.setStatus('deprecated')
cpsIfVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 11)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfVlanMaxSecureMacAddr"), ("CISCO-PORT-SECURITY-MIB", "cpsIfVlanCurSecureMacAddrCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsIfVlanGroup = cpsIfVlanGroup.setStatus('obsolete')
cpsGlobalClearAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 12)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsGlobalClearSecureMacAddresses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsGlobalClearAddressGroup = cpsGlobalClearAddressGroup.setStatus('current')
cpsInterfaceGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 13)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfPortSecurityEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfPortSecurityStatus"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMaxSecureMacAddr"), ("CISCO-PORT-SECURITY-MIB", "cpsIfCurrentSecureMacAddrCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureMacAddrAgingType"), ("CISCO-PORT-SECURITY-MIB", "cpsIfSecureMacAddrAgingTime"), ("CISCO-PORT-SECURITY-MIB", "cpsIfStaticMacAddrAgingEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfViolationAction"), ("CISCO-PORT-SECURITY-MIB", "cpsIfViolationCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfClearSecureMacAddresses"), ("CISCO-PORT-SECURITY-MIB", "cpsIfInvalidSrcRateLimitEnable"), ("CISCO-PORT-SECURITY-MIB", "cpsIfInvalidSrcRateLimitValue"), ("CISCO-PORT-SECURITY-MIB", "cpsIfStickyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsInterfaceGroup2 = cpsInterfaceGroup2.setStatus('current')
cpsTrunkSecureNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 14)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsTrunkSecureMacAddrViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsTrunkSecureNotificationGroup = cpsTrunkSecureNotificationGroup.setStatus('deprecated')
cpsIfMultiVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 15)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfMultiVlanMaxSecureMacAddr"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMultiVlanSecureMacAddrCount"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMultiVlanClearSecureMacAddr"), ("CISCO-PORT-SECURITY-MIB", "cpsIfMultiVlanRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsIfMultiVlanGroup = cpsIfMultiVlanGroup.setStatus('current')
cpsIfVlanSecureNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 16)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfVlanSecureMacAddrViolation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsIfVlanSecureNotificationGroup = cpsIfVlanSecureNotificationGroup.setStatus('current')
cpsExtInterfaceGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 315, 2, 2, 17)).setObjects(("CISCO-PORT-SECURITY-MIB", "cpsIfSecureLastMacAddrVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpsExtInterfaceGroup1 = cpsExtInterfaceGroup1.setStatus('current')
mibBuilder.exportSymbols("CISCO-PORT-SECURITY-MIB", cpsIfCurrentSecureMacAddrCount=cpsIfCurrentSecureMacAddrCount, cpsIfClearSecureAddresses=cpsIfClearSecureAddresses, cpsIfVlanSecureMacAddrGroup=cpsIfVlanSecureMacAddrGroup, cpsIfMultiVlanIndex=cpsIfMultiVlanIndex, cpsIfClearSecureMacAddresses=cpsIfClearSecureMacAddresses, cpsIfVlanSecureMacAddrRemainAge=cpsIfVlanSecureMacAddrRemainAge, cpsGlobalTotalSecureAddress=cpsGlobalTotalSecureAddress, cpsIfVlanSecureMacAddrTable=cpsIfVlanSecureMacAddrTable, ciscoPortSecurityMIBNotifs=ciscoPortSecurityMIBNotifs, cpsIfVlanSecureMacAddrRowStatus=cpsIfVlanSecureMacAddrRowStatus, cpsIfVlanEntry=cpsIfVlanEntry, ciscoPortSecurityMIBObjects=ciscoPortSecurityMIBObjects, cpsSecureMacAddrRemainingAge=cpsSecureMacAddrRemainingAge, cpsInterfaceGroup=cpsInterfaceGroup, cpsIfPortSecurityStatus=cpsIfPortSecurityStatus, cpsIfStaticMacAddrAgingEnable=cpsIfStaticMacAddrAgingEnable, cpsSecureMacAddrViolation=cpsSecureMacAddrViolation, cpsGlobalSNMPNotifControl=cpsGlobalSNMPNotifControl, ciscoPortSecurityMIBCompliance1=ciscoPortSecurityMIBCompliance1, cpsTrunkSecureMacAddrViolation=cpsTrunkSecureMacAddrViolation, cpsIfVlanSecureMacAddress=cpsIfVlanSecureMacAddress, cpsExtInterfaceGroup=cpsExtInterfaceGroup, cpsIfViolationAction=cpsIfViolationAction, cpsIfVlanGroup=cpsIfVlanGroup, cpsIfMultiVlanRowStatus=cpsIfMultiVlanRowStatus, cpsIfVlanSecureVlanIndex=cpsIfVlanSecureVlanIndex, cpsIfVlanIndex=cpsIfVlanIndex, cpsIfConfigEntry=cpsIfConfigEntry, ciscoPortSecurityMIBCompliance2=ciscoPortSecurityMIBCompliance2, cpsIfSecureMacAddrAgingTime=cpsIfSecureMacAddrAgingTime, cpsSecureMacAddrRowStatus=cpsSecureMacAddrRowStatus, cpsInterfaceGroup1=cpsInterfaceGroup1, cpsGlobalMaxSecureAddress=cpsGlobalMaxSecureAddress, ciscoPortSecurityMIBCompliance4=ciscoPortSecurityMIBCompliance4, ciscoPortSecurityMIBCompliance=ciscoPortSecurityMIBCompliance, ciscoPortSecurityMIB=ciscoPortSecurityMIB, cpsNotificationGroup=cpsNotificationGroup, cpsExtInterfaceGroup1=cpsExtInterfaceGroup1, cpsExtConfigInterfaceGroup=cpsExtConfigInterfaceGroup, cpsIfMultiVlanTable=cpsIfMultiVlanTable, ciscoPortSecurityMIBGroups=ciscoPortSecurityMIBGroups, cpsSecureMacAddressEntry=cpsSecureMacAddressEntry, cpsIfSecureMacAddrAgingType=cpsIfSecureMacAddrAgingType, cpsIfConfigTable=cpsIfConfigTable, cpsIfMultiVlanMaxSecureMacAddr=cpsIfMultiVlanMaxSecureMacAddr, cpsGlobalClearAddressGroup=cpsGlobalClearAddressGroup, cpsIfVlanMaxSecureMacAddr=cpsIfVlanMaxSecureMacAddr, cpsIfInvalidSrcRateLimitValue=cpsIfInvalidSrcRateLimitValue, cpsGlobalPortSecurityEnable=cpsGlobalPortSecurityEnable, cpsIfShutdownTimeout=cpsIfShutdownTimeout, cpsIfVlanSecureMacAddrType=cpsIfVlanSecureMacAddrType, ciscoPortSecurityMIBConform=ciscoPortSecurityMIBConform, cpsSecureMacAddress=cpsSecureMacAddress, cpsGlobalObjects=cpsGlobalObjects, PYSNMP_MODULE_ID=ciscoPortSecurityMIB, cpsGlobalSNMPNotifRate=cpsGlobalSNMPNotifRate, ClearSecureMacAddrType=ClearSecureMacAddrType, ciscoPortSecurityMIBCompliance3=ciscoPortSecurityMIBCompliance3, cpsTrunkSecureNotificationGroup=cpsTrunkSecureNotificationGroup, cpsIfVlanSecureNotificationGroup=cpsIfVlanSecureNotificationGroup, cpsUnicastFloodingInterfaceGroup=cpsUnicastFloodingInterfaceGroup, cpsGlobalGroup=cpsGlobalGroup, cpsInterfaceGroup2=cpsInterfaceGroup2, ciscoPortSecurityMIBCompliances=ciscoPortSecurityMIBCompliances, cpsIfVlanTable=cpsIfVlanTable, cpsIfPortSecurityEnable=cpsIfPortSecurityEnable, cpsGlobalClearSecureMacAddresses=cpsGlobalClearSecureMacAddresses, cpsIfViolationCount=cpsIfViolationCount, cpsIfMultiVlanClearSecureMacAddr=cpsIfMultiVlanClearSecureMacAddr, cpsIfMultiVlanGroup=cpsIfMultiVlanGroup, cpsIfSecureLastMacAddress=cpsIfSecureLastMacAddress, cpsIfVlanCurSecureMacAddrCount=cpsIfVlanCurSecureMacAddrCount, cpsIfStickyEnable=cpsIfStickyEnable, cpsIfMultiVlanEntry=cpsIfMultiVlanEntry, cpsIfVlanSecureMacAddrViolation=cpsIfVlanSecureMacAddrViolation, cpsIfInvalidSrcRateLimitEnable=cpsIfInvalidSrcRateLimitEnable, cpsIfVlanSecureMacAddrEntry=cpsIfVlanSecureMacAddrEntry, cpsInterfaceNotifs=cpsInterfaceNotifs, cpsIfUnicastFloodingEnable=cpsIfUnicastFloodingEnable, cpsSecureMacAddressTable=cpsSecureMacAddressTable, cpsSecureMacAddrType=cpsSecureMacAddrType, cpsIfMaxSecureMacAddr=cpsIfMaxSecureMacAddr, cpsIfSecureLastMacAddrVlanId=cpsIfSecureLastMacAddrVlanId, cpsIfMultiVlanSecureMacAddrCount=cpsIfMultiVlanSecureMacAddrCount, cpsShutdownTimeoutInterfaceGroup=cpsShutdownTimeoutInterfaceGroup, cpsInterfaceObjects=cpsInterfaceObjects)
